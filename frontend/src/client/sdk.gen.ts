// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import type {
  AgentsReadAgentsData,
  AgentsReadAgentsResponse,
  AgentsCreateAgentData,
  AgentsCreateAgentResponse,
  AgentsReadAgentData,
  AgentsReadAgentResponse,
  AgentsUpdateAgentData,
  AgentsUpdateAgentResponse,
  AgentsDeleteAgentData,
  AgentsDeleteAgentResponse,
  AgentsTestAgentData,
  AgentsTestAgentResponse,
  AgentsReadAgentConfigurationsData,
  AgentsReadAgentConfigurationsResponse,
  AgentsCreateAgentConfigurationData,
  AgentsCreateAgentConfigurationResponse,
  AgentsReadAgentConfigurationData,
  AgentsReadAgentConfigurationResponse,
  AgentsActivateAgentConfigurationData,
  AgentsActivateAgentConfigurationResponse,
  ApiKeysReadApiKeysData,
  ApiKeysReadApiKeysResponse,
  ApiKeysCreateApiKeyData,
  ApiKeysCreateApiKeyResponse,
  ApiKeysReadApiKeyData,
  ApiKeysReadApiKeyResponse,
  ApiKeysUpdateApiKeyData,
  ApiKeysUpdateApiKeyResponse,
  ApiKeysDeleteApiKeyData,
  ApiKeysDeleteApiKeyResponse,
  ExecutionsReadExecutionsData,
  ExecutionsReadExecutionsResponse,
  ExecutionsReadExecutionData,
  ExecutionsReadExecutionResponse,
  ExecutionsDeleteExecutionData,
  ExecutionsDeleteExecutionResponse,
  ExecutionsReadAgentExecutionsData,
  ExecutionsReadAgentExecutionsResponse,
  ExecutionsCreateExecutionData,
  ExecutionsCreateExecutionResponse,
  ExecutionsCancelExecutionData,
  ExecutionsCancelExecutionResponse,
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  LoginRecoverPasswordData,
  LoginRecoverPasswordResponse,
  LoginResetPasswordData,
  LoginResetPasswordResponse,
  TeamsReadTeamsData,
  TeamsReadTeamsResponse,
  TeamsCreateTeamData,
  TeamsCreateTeamResponse,
  TeamsReadTeamData,
  TeamsReadTeamResponse,
  TeamsUpdateTeamData,
  TeamsUpdateTeamResponse,
  TeamsDeleteTeamData,
  TeamsDeleteTeamResponse,
  TeamsReadTeamMembersData,
  TeamsReadTeamMembersResponse,
  TeamsAddTeamMemberData,
  TeamsAddTeamMemberResponse,
  TeamsUpdateTeamMemberData,
  TeamsUpdateTeamMemberResponse,
  TeamsRemoveTeamMemberData,
  TeamsRemoveTeamMemberResponse,
  UsersReadUsersData,
  UsersReadUsersResponse,
  UsersCreateUserData,
  UsersCreateUserResponse,
  UsersReadUserMeResponse,
  UsersDeleteUserMeResponse,
  UsersUpdateUserMeData,
  UsersUpdateUserMeResponse,
  UsersUpdatePasswordMeData,
  UsersUpdatePasswordMeResponse,
  UsersRegisterUserData,
  UsersRegisterUserResponse,
  UsersReadUserByIdData,
  UsersReadUserByIdResponse,
  UsersUpdateUserData,
  UsersUpdateUserResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UtilsHealthCheckResponse,
} from "./types.gen"

export class AgentsService {
  /**
   * Read Agents
   * Retrieve agents. If team_id is provided, filter by team.
   * @param data The data for the request.
   * @param data.teamId
   * @param data.skip
   * @param data.limit
   * @returns AgentsPublic Successful Response
   * @throws ApiError
   */
  public static readAgents(
    data: AgentsReadAgentsData = {},
  ): CancelablePromise<AgentsReadAgentsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/agents/",
      query: {
        team_id: data.teamId,
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Agent
   * Create new agent in a team.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public static createAgent(
    data: AgentsCreateAgentData,
  ): CancelablePromise<AgentsCreateAgentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/agents/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Agent
   * Get agent by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public static readAgent(
    data: AgentsReadAgentData,
  ): CancelablePromise<AgentsReadAgentResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/agents/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Agent
   * Update an agent (basic properties only, not configuration).
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public static updateAgent(
    data: AgentsUpdateAgentData,
  ): CancelablePromise<AgentsUpdateAgentResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/agents/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Agent
   * Delete an agent.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteAgent(
    data: AgentsDeleteAgentData,
  ): CancelablePromise<AgentsDeleteAgentResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/agents/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Agent
   * Test an agent with custom parameters (synchronous execution).
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns AgentExecutionPublic Successful Response
   * @throws ApiError
   */
  public static testAgent(
    data: AgentsTestAgentData,
  ): CancelablePromise<AgentsTestAgentResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/agents/{id}/test",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Agent Configurations
   * Retrieve configuration versions for an agent.
   * @param data The data for the request.
   * @param data.id
   * @param data.skip
   * @param data.limit
   * @returns AgentConfigurationsPublic Successful Response
   * @throws ApiError
   */
  public static readAgentConfigurations(
    data: AgentsReadAgentConfigurationsData,
  ): CancelablePromise<AgentsReadAgentConfigurationsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/agents/{id}/configurations",
      path: {
        id: data.id,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Agent Configuration
   * Create a new configuration version for an agent.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns AgentConfigurationPublic Successful Response
   * @throws ApiError
   */
  public static createAgentConfiguration(
    data: AgentsCreateAgentConfigurationData,
  ): CancelablePromise<AgentsCreateAgentConfigurationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/agents/{id}/configurations",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Agent Configuration
   * Get a specific configuration version by ID.
   * @param data The data for the request.
   * @param data.id
   * @param data.configId
   * @returns AgentConfigurationPublic Successful Response
   * @throws ApiError
   */
  public static readAgentConfiguration(
    data: AgentsReadAgentConfigurationData,
  ): CancelablePromise<AgentsReadAgentConfigurationResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/agents/{id}/configurations/{config_id}",
      path: {
        id: data.id,
        config_id: data.configId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Activate Agent Configuration
   * Activate a specific configuration version (make it the current version).
   * @param data The data for the request.
   * @param data.id
   * @param data.configId
   * @returns AgentPublic Successful Response
   * @throws ApiError
   */
  public static activateAgentConfiguration(
    data: AgentsActivateAgentConfigurationData,
  ): CancelablePromise<AgentsActivateAgentConfigurationResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/agents/{id}/configurations/{config_id}/activate",
      path: {
        id: data.id,
        config_id: data.configId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ApiKeysService {
  /**
   * Read Api Keys
   * Retrieve API keys.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns APIKeysPublic Successful Response
   * @throws ApiError
   */
  public static readApiKeys(
    data: ApiKeysReadApiKeysData = {},
  ): CancelablePromise<ApiKeysReadApiKeysResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/api-keys/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Api Key
   * Create new API key.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns APIKeyWithSecret Successful Response
   * @throws ApiError
   */
  public static createApiKey(
    data: ApiKeysCreateApiKeyData,
  ): CancelablePromise<ApiKeysCreateApiKeyResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/api-keys/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Api Key
   * Get API key by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns APIKeyPublic Successful Response
   * @throws ApiError
   */
  public static readApiKey(
    data: ApiKeysReadApiKeyData,
  ): CancelablePromise<ApiKeysReadApiKeyResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/api-keys/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Api Key
   * Update an API key.
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns APIKeyPublic Successful Response
   * @throws ApiError
   */
  public static updateApiKey(
    data: ApiKeysUpdateApiKeyData,
  ): CancelablePromise<ApiKeysUpdateApiKeyResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/api-keys/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Api Key
   * Delete an API key.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteApiKey(
    data: ApiKeysDeleteApiKeyData,
  ): CancelablePromise<ApiKeysDeleteApiKeyResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/api-keys/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class ExecutionsService {
  /**
   * Read Executions
   * Retrieve executions for the current user's agents.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns AgentExecutionsPublic Successful Response
   * @throws ApiError
   */
  public static readExecutions(
    data: ExecutionsReadExecutionsData = {},
  ): CancelablePromise<ExecutionsReadExecutionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/executions/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Execution
   * Get execution by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns AgentExecutionPublic Successful Response
   * @throws ApiError
   */
  public static readExecution(
    data: ExecutionsReadExecutionData,
  ): CancelablePromise<ExecutionsReadExecutionResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/executions/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Execution
   * Delete an execution.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteExecution(
    data: ExecutionsDeleteExecutionData,
  ): CancelablePromise<ExecutionsDeleteExecutionResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/executions/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Agent Executions
   * Get executions for a specific agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.skip
   * @param data.limit
   * @returns AgentExecutionsPublic Successful Response
   * @throws ApiError
   */
  public static readAgentExecutions(
    data: ExecutionsReadAgentExecutionsData,
  ): CancelablePromise<ExecutionsReadAgentExecutionsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/executions/agent/{agent_id}",
      path: {
        agent_id: data.agentId,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Execution
   * Create new execution for an agent.
   * @param data The data for the request.
   * @param data.agentId
   * @param data.requestBody
   * @returns AgentExecutionPublic Successful Response
   * @throws ApiError
   */
  public static createExecution(
    data: ExecutionsCreateExecutionData,
  ): CancelablePromise<ExecutionsCreateExecutionResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/executions/agent/{agent_id}",
      path: {
        agent_id: data.agentId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Cancel Execution
   * Cancel a running execution.
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static cancelExecution(
    data: ExecutionsCancelExecutionData,
  ): CancelablePromise<ExecutionsCancelExecutionResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/executions/{id}/cancel",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/access-token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }

  /**
   * Recover Password
   * Password Recovery
   * @param data The data for the request.
   * @param data.email
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static recoverPassword(
    data: LoginRecoverPasswordData,
  ): CancelablePromise<LoginRecoverPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/password-recovery/{email}",
      path: {
        email: data.email,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Reset Password
   * Reset password
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static resetPassword(
    data: LoginResetPasswordData,
  ): CancelablePromise<LoginResetPasswordResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/reset-password/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class TeamsService {
  /**
   * Read Teams
   * Retrieve teams that the current user is a member of.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns TeamsPublic Successful Response
   * @throws ApiError
   */
  public static readTeams(
    data: TeamsReadTeamsData = {},
  ): CancelablePromise<TeamsReadTeamsResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/teams/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create Team
   * Create new team and add the creator as owner.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns TeamPublic Successful Response
   * @throws ApiError
   */
  public static createTeam(
    data: TeamsCreateTeamData,
  ): CancelablePromise<TeamsCreateTeamResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/teams/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Team
   * Get team by ID.
   * @param data The data for the request.
   * @param data.id
   * @returns TeamPublic Successful Response
   * @throws ApiError
   */
  public static readTeam(
    data: TeamsReadTeamData,
  ): CancelablePromise<TeamsReadTeamResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/teams/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Team
   * Update a team (only admins and owners can update).
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns TeamPublic Successful Response
   * @throws ApiError
   */
  public static updateTeam(
    data: TeamsUpdateTeamData,
  ): CancelablePromise<TeamsUpdateTeamResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/teams/{id}",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete Team
   * Delete a team (only owners can delete).
   * @param data The data for the request.
   * @param data.id
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteTeam(
    data: TeamsDeleteTeamData,
  ): CancelablePromise<TeamsDeleteTeamResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/teams/{id}",
      path: {
        id: data.id,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read Team Members
   * Retrieve team members.
   * @param data The data for the request.
   * @param data.id
   * @param data.skip
   * @param data.limit
   * @returns TeamMembersPublic Successful Response
   * @throws ApiError
   */
  public static readTeamMembers(
    data: TeamsReadTeamMembersData,
  ): CancelablePromise<TeamsReadTeamMembersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/teams/{id}/members",
      path: {
        id: data.id,
      },
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Add Team Member
   * Add a member to the team (only admins and owners can add members).
   * @param data The data for the request.
   * @param data.id
   * @param data.requestBody
   * @returns TeamMemberPublic Successful Response
   * @throws ApiError
   */
  public static addTeamMember(
    data: TeamsAddTeamMemberData,
  ): CancelablePromise<TeamsAddTeamMemberResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/teams/{id}/members",
      path: {
        id: data.id,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Team Member
   * Update a team member's role (only admins and owners can update).
   * @param data The data for the request.
   * @param data.id
   * @param data.memberId
   * @param data.requestBody
   * @returns TeamMemberPublic Successful Response
   * @throws ApiError
   */
  public static updateTeamMember(
    data: TeamsUpdateTeamMemberData,
  ): CancelablePromise<TeamsUpdateTeamMemberResponse> {
    return __request(OpenAPI, {
      method: "PUT",
      url: "/api/v1/teams/{id}/members/{member_id}",
      path: {
        id: data.id,
        member_id: data.memberId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Remove Team Member
   * Remove a member from the team (admins/owners can remove members, users can remove themselves).
   * @param data The data for the request.
   * @param data.id
   * @param data.memberId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static removeTeamMember(
    data: TeamsRemoveTeamMemberData,
  ): CancelablePromise<TeamsRemoveTeamMemberResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/teams/{id}/members/{member_id}",
      path: {
        id: data.id,
        member_id: data.memberId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UsersService {
  /**
   * Read Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static readUsers(
    data: UsersReadUsersData = {},
  ): CancelablePromise<UsersReadUsersResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/",
      query: {
        skip: data.skip,
        limit: data.limit,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: UsersCreateUserData,
  ): CancelablePromise<UsersCreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User Me
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserMe(): CancelablePromise<UsersReadUserMeResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Delete User Me
   * Delete own user.
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUserMe(): CancelablePromise<UsersDeleteUserMeResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/me",
    })
  }

  /**
   * Update User Me
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserMe(
    data: UsersUpdateUserMeData,
  ): CancelablePromise<UsersUpdateUserMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update Password Me
   * Update own password.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static updatePasswordMe(
    data: UsersUpdatePasswordMeData,
  ): CancelablePromise<UsersUpdatePasswordMeResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/me/password",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Register User
   * Create new user without the need to be logged in.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static registerUser(
    data: UsersRegisterUserData,
  ): CancelablePromise<UsersRegisterUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/users/signup",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Read User By Id
   * Get a specific user by id.
   * @param data The data for the request.
   * @param data.userId
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static readUserById(
    data: UsersReadUserByIdData,
  ): CancelablePromise<UsersReadUserByIdResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
    data: UsersUpdateUserData,
  ): CancelablePromise<UsersUpdateUserResponse> {
    return __request(OpenAPI, {
      method: "PATCH",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
    data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
      },
    })
  }
}

export class UtilsService {
  /**
   * Health Check
   * @returns boolean Successful Response
   * @throws ApiError
   */
  public static healthCheck(): CancelablePromise<UtilsHealthCheckResponse> {
    return __request(OpenAPI, {
      method: "GET",
      url: "/api/v1/utils/health-check/",
    })
  }
}
