/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as SettingsImport } from './routes/settings'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as TeamIdImport } from './routes/$teamId'
import { Route as IndexImport } from './routes/index'
import { Route as TeamIdIndexImport } from './routes/$teamId/index'
import { Route as TeamIdExecutionsImport } from './routes/$teamId/executions'
import { Route as TeamIdApiKeysImport } from './routes/$teamId/api-keys'
import { Route as TeamIdAdminImport } from './routes/$teamId/admin'
import { Route as TeamIdAgentsIndexImport } from './routes/$teamId/agents/index'
import { Route as TeamIdAgentsAgentIdIndexImport } from './routes/$teamId/agents/$agentId/index'
import { Route as TeamIdAgentsAgentIdSettingsImport } from './routes/$teamId/agents/$agentId/settings'
import { Route as TeamIdAgentsAgentIdExecutionsImport } from './routes/$teamId/agents/$agentId/executions'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRoute = SettingsImport.update({
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const TeamIdRoute = TeamIdImport.update({
  path: '/$teamId',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TeamIdIndexRoute = TeamIdIndexImport.update({
  path: '/',
  getParentRoute: () => TeamIdRoute,
} as any)

const TeamIdExecutionsRoute = TeamIdExecutionsImport.update({
  path: '/executions',
  getParentRoute: () => TeamIdRoute,
} as any)

const TeamIdApiKeysRoute = TeamIdApiKeysImport.update({
  path: '/api-keys',
  getParentRoute: () => TeamIdRoute,
} as any)

const TeamIdAdminRoute = TeamIdAdminImport.update({
  path: '/admin',
  getParentRoute: () => TeamIdRoute,
} as any)

const TeamIdAgentsIndexRoute = TeamIdAgentsIndexImport.update({
  path: '/agents/',
  getParentRoute: () => TeamIdRoute,
} as any)

const TeamIdAgentsAgentIdIndexRoute = TeamIdAgentsAgentIdIndexImport.update({
  path: '/agents/$agentId/',
  getParentRoute: () => TeamIdRoute,
} as any)

const TeamIdAgentsAgentIdSettingsRoute =
  TeamIdAgentsAgentIdSettingsImport.update({
    path: '/agents/$agentId/settings',
    getParentRoute: () => TeamIdRoute,
  } as any)

const TeamIdAgentsAgentIdExecutionsRoute =
  TeamIdAgentsAgentIdExecutionsImport.update({
    path: '/agents/$agentId/executions',
    getParentRoute: () => TeamIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$teamId': {
      preLoaderRoute: typeof TeamIdImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/$teamId/admin': {
      preLoaderRoute: typeof TeamIdAdminImport
      parentRoute: typeof TeamIdImport
    }
    '/$teamId/api-keys': {
      preLoaderRoute: typeof TeamIdApiKeysImport
      parentRoute: typeof TeamIdImport
    }
    '/$teamId/executions': {
      preLoaderRoute: typeof TeamIdExecutionsImport
      parentRoute: typeof TeamIdImport
    }
    '/$teamId/': {
      preLoaderRoute: typeof TeamIdIndexImport
      parentRoute: typeof TeamIdImport
    }
    '/$teamId/agents/': {
      preLoaderRoute: typeof TeamIdAgentsIndexImport
      parentRoute: typeof TeamIdImport
    }
    '/$teamId/agents/$agentId/executions': {
      preLoaderRoute: typeof TeamIdAgentsAgentIdExecutionsImport
      parentRoute: typeof TeamIdImport
    }
    '/$teamId/agents/$agentId/settings': {
      preLoaderRoute: typeof TeamIdAgentsAgentIdSettingsImport
      parentRoute: typeof TeamIdImport
    }
    '/$teamId/agents/$agentId/': {
      preLoaderRoute: typeof TeamIdAgentsAgentIdIndexImport
      parentRoute: typeof TeamIdImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexRoute,
  TeamIdRoute.addChildren([
    TeamIdAdminRoute,
    TeamIdApiKeysRoute,
    TeamIdExecutionsRoute,
    TeamIdIndexRoute,
    TeamIdAgentsIndexRoute,
    TeamIdAgentsAgentIdExecutionsRoute,
    TeamIdAgentsAgentIdSettingsRoute,
    TeamIdAgentsAgentIdIndexRoute,
  ]),
  LoginRoute,
  RecoverPasswordRoute,
  ResetPasswordRoute,
  SettingsRoute,
  SignupRoute,
])

/* prettier-ignore-end */
