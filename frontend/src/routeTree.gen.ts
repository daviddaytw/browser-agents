/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutItemsImport } from './routes/_layout/items'
import { Route as LayoutExecutionsImport } from './routes/_layout/executions'
import { Route as LayoutApiKeysImport } from './routes/_layout/api-keys'
import { Route as LayoutAdminImport } from './routes/_layout/admin'
import { Route as LayoutAgentsIndexImport } from './routes/_layout/agents/index'
import { Route as LayoutAgentsAgentIdIndexImport } from './routes/_layout/agents/$agentId/index'
import { Route as LayoutAgentsAgentIdSettingsImport } from './routes/_layout/agents/$agentId/settings'
import { Route as LayoutAgentsAgentIdExecutionsImport } from './routes/_layout/agents/$agentId/executions'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutItemsRoute = LayoutItemsImport.update({
  path: '/items',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutExecutionsRoute = LayoutExecutionsImport.update({
  path: '/executions',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutApiKeysRoute = LayoutApiKeysImport.update({
  path: '/api-keys',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAgentsIndexRoute = LayoutAgentsIndexImport.update({
  path: '/agents/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAgentsAgentIdIndexRoute = LayoutAgentsAgentIdIndexImport.update({
  path: '/agents/$agentId/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAgentsAgentIdSettingsRoute =
  LayoutAgentsAgentIdSettingsImport.update({
    path: '/agents/$agentId/settings',
    getParentRoute: () => LayoutRoute,
  } as any)

const LayoutAgentsAgentIdExecutionsRoute =
  LayoutAgentsAgentIdExecutionsImport.update({
    path: '/agents/$agentId/executions',
    getParentRoute: () => LayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/api-keys': {
      preLoaderRoute: typeof LayoutApiKeysImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/executions': {
      preLoaderRoute: typeof LayoutExecutionsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/items': {
      preLoaderRoute: typeof LayoutItemsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/agents/': {
      preLoaderRoute: typeof LayoutAgentsIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/agents/$agentId/executions': {
      preLoaderRoute: typeof LayoutAgentsAgentIdExecutionsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/agents/$agentId/settings': {
      preLoaderRoute: typeof LayoutAgentsAgentIdSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/agents/$agentId/': {
      preLoaderRoute: typeof LayoutAgentsAgentIdIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  LayoutRoute.addChildren([
    LayoutAdminRoute,
    LayoutApiKeysRoute,
    LayoutExecutionsRoute,
    LayoutItemsRoute,
    LayoutSettingsRoute,
    LayoutIndexRoute,
    LayoutAgentsIndexRoute,
    LayoutAgentsAgentIdExecutionsRoute,
    LayoutAgentsAgentIdSettingsRoute,
    LayoutAgentsAgentIdIndexRoute,
  ]),
  LoginRoute,
  RecoverPasswordRoute,
  ResetPasswordRoute,
  SignupRoute,
])

/* prettier-ignore-end */
